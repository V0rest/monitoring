name: Update Grafana Dashboards

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  INSTANCE_DEPLOY_PATH: /etc/monitoring
  REPO_DEPLOYMENT_PATH: /local_deployment
  GRAFANA_DASHBOARD_PATH: /grafana/provisioning/dashboards
  ANSIBLE_INVENTORY_FILE: ansible/inventory.aws_ec2.yml
  ANSIBLE_CONFIG: ansible/ansible.cfg

jobs:
  job:
    name: "Update Grafana Dashboards"
    runs-on: ubuntu-20.04
    environment: Prod

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_VITECH_CLOUD }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_VITECH_CLOUD }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = ${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_VITECH_CLOUD }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_VITECH_CLOUD }}
#          aws-region: ${{ env.AWS_REGION }}

      - name: Write SSH Key to Disk
        shell: bash
        run: |
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > /home/runner/monitoring.pem
          chmod 400 /home/runner/monitoring.pem

      - name: Install Dependencies
        shell: bash
        run: |
          pip3 install boto3 ansible
          ansible-galaxy collection install amazon.aws

      - name: Validate Ansible Inventory
        run: |
          ansible-inventory --inventory ${{ env.ANSIBLE_INVENTORY_FILE }} --list -vvvv

      - name: Ansible AD-HOC Synchronize dashboards with instance
        run: |
          ansible all -m synchronize -a "src=$GITHUB_WORKSPACE${{ env.REPO_DEPLOYMENT_PATH }}${{ env.GRAFANA_DASHBOARD_PATH }}/ dest=${{ env.INSTANCE_DEPLOY_PATH }}${{ env.GRAFANA_DASHBOARD_PATH }}" -i ${{ env.ANSIBLE_INVENTORY_FILE }} -b

      - name: Run Ansible Playbook
        id: check_grafana_status
        run: |
          ansible-playbook --inventory ${{ env.ANSIBLE_INVENTORY_FILE }} ansible/ansible_update_dashboards.yml
          echo "::set-output name=outcome::$(job output "msg": "The container status is running" )"

      - name: Grafana status
        if: steps.check_grafana_status.outcome !=  '"msg": "The container status is running"'
        run: exit 1



#      - name: Check Grafana container status
#        run: |
#          ansible all -m {% if result.exists %}debug{% endif %} -a msg="{{ result.container['State']['Status' }}" -i ${{ env.ANSIBLE_INVENTORY_FILE }} -b

      - name: Send custom JSON data to Slack workflow
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
         # For posting a rich message using Block Kit
         payload: |
           {
             "text": "GitHub Action Deploy Monitoring result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
             "blocks": [
               {
                 "type": "section",
                 "text": {
                   "type": "mrkdwn",
                   "text": "GitHub Action Deploy Monitoring result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                 }
               }
             ]
           }
        env:
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
